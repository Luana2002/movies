{"ast":null,"code":"var _jsxFileName = \"/home/luana/movies/netflix-clone/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport tmdb from \"./tmdb\";\nimport './App.css';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\nexport default (() => {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setfeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      // pegar lista total\n      let list = await tmdb.getHomeList();\n      setMovieList(list); //pegar o featured\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await tmdb.getMovieInfo(chosen.id, 'tv');\n      setfeaturedData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  useEffect(() => {\n    const scrollListenner = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n\n    window.addEventListener('scroll', scrollListenner);\n    return () => {\n      window.removeEventListener('scroll', scrollListenner);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    black: blackHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }), featuredData && /*#__PURE__*/React.createElement(FeaturedMovie, {\n    item: featuredData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"lists\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, movieList.map((item, key) => /*#__PURE__*/React.createElement(MovieRow, {\n    key: key,\n    title: item.title,\n    items: item.items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, \"feito com \", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"cora\\xE7\\xE3o\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"\\uD83D\\uDC9C\"), \" por Luana Rodrigues de Paula\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), \"Direitos de Imagem para Netflix\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), \"Dados pegos do site Themoviedb.org\"), movieList.length <= 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\",\n    alt: \"carregando\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })));\n});","map":{"version":3,"sources":["/home/luana/movies/netflix-clone/src/App.js"],"names":["React","useEffect","useState","tmdb","MovieRow","FeaturedMovie","Header","movieList","setMovieList","featuredData","setfeaturedData","blackHeader","setBlackHeader","loadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","scrollListenner","window","scrollY","addEventListener","removeEventListener","map","item","key","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport tmdb from \"./tmdb\";\nimport './App.css'\nimport MovieRow from './components/MovieRow'\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState ([]);\n  const [featuredData, setfeaturedData] = useState (null);\n  const [blackHeader, setBlackHeader] = useState (false)\n\n  useEffect(() => {\n    const loadAll = async ()=>{\n      // pegar lista total\n      let list = await tmdb.getHomeList();\n      setMovieList(list);\n\n\n      //pegar o featured\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random()* (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await tmdb.getMovieInfo(chosen.id, 'tv');\n      \n      setfeaturedData(chosenInfo);\n    }\n    \n    loadAll();\n  }, []);\n\n  useEffect (() => {\n    const scrollListenner = () => {\n      if (window.scrollY > 10){\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListenner);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListenner)\n    }\n  }, []);\n  return (\n  <div className=\"page\">\n\n    <Header black={blackHeader} />\n\n    {featuredData &&\n      <FeaturedMovie item={featuredData}/>\n    }\n\n    <section className=\"lists\">\n      {movieList.map((item,key)=>(\n        <MovieRow key={key} title={item.title} items={item.items}/>\n      ))}\n    </section>\n\n    <footer>\n      feito com <span role=\"img\" aria-label=\"coraÃ§Ã£o\">ðŸ’œ</span> por Luana Rodrigues de Paula \n      <br />Direitos de Imagem para Netflix\n      <br />Dados pegos do site Themoviedb.org\n    </footer>\n    \n    {movieList.length <= 0 && \n    <div className=\"loading\">\n        <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"carregando\" />\n    </div>\n    }\n  </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}