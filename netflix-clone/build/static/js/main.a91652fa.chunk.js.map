{"version":3,"sources":["tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","endpoint","req","json","wrap","_context","prev","next","fetch","concat","sent","abrupt","stop","_x","apply","this","arguments","tmdb","getHomeList","_getHomeList","_callee2","_context2","t0","t1","slug","title","items","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","t14","t15","getMovieInfo","_getMovieInfo","_callee3","movieId","type","info","_context3","_x2","_x3","components_MovieRow","react_default","createElement","className","results","length","map","item","key","src","poster_path","alt","original_title","components_FeaturedMovie","firstDate","Date","first_air_date","genres","i","push","name","style","backgroundSize","background","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","href","id","join","components_Header","black","src_App","_useState","useState","_useState2","slicedToArray","movieList","setMovieList","_useState3","_useState4","featuredData","setfeaturedData","_useState5","_useState6","blackHeader","setBlackHeader","useEffect","list","originals","randomChosen","chosen","chosenInfo","filter","Math","floor","random","loadAll","scrollListenner","window","scrollY","addEventListener","removeEventListener","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAAMA,EAAU,mCAaVC,EAAU,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACGC,MAAK,GAAAC,OAbV,gCAaUA,OAAeR,IADvB,cACTC,EADSG,EAAAK,KAAAL,EAAAE,KAAA,EAEIL,EAAIC,OAFR,cAETA,EAFSE,EAAAK,KAAAL,EAAAM,OAAA,SAGRR,GAHQ,wBAAAE,EAAAO,SAAAZ,MAAH,gBAAAa,GAAA,OAAAnB,EAAAoB,MAAAC,KAAAC,YAAA,GAMDC,EAAA,CACXC,YAAW,eAAAC,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAE,SAAAqB,IAAA,OAAAvB,EAAAC,EAAAM,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cAAAc,EAAAd,KAAA,EAKYd,EAAU,wDAAAgB,OAA0DjB,IALhF,cAAA6B,EAAAC,GAAAD,EAAAX,KAAAW,EAAAE,GAAA,CAGDC,KAAM,YACNC,MAAO,uBACPC,MALCL,EAAAC,IAAAD,EAAAd,KAAA,EAUYd,EAAU,6CAAAgB,OAA+CjB,IAVrE,cAAA6B,EAAAM,GAAAN,EAAAX,KAAAW,EAAAO,GAAA,CAQDJ,KAAM,WACNC,MAAO,4BACPC,MAVCL,EAAAM,IAAAN,EAAAd,KAAA,GAeYd,EAAU,4CAAAgB,OAA8CjB,IAfpE,eAAA6B,EAAAQ,GAAAR,EAAAX,KAAAW,EAAAS,GAAA,CAaDN,KAAM,YACNC,MAAO,UACPC,MAfCL,EAAAQ,IAAAR,EAAAd,KAAA,GAoBYd,EAAU,yDAAAgB,OAA2DjB,IApBjF,eAAA6B,EAAAU,GAAAV,EAAAX,KAAAW,EAAAW,GAAA,CAkBDR,KAAM,SACNC,MAAO,aACPC,MApBCL,EAAAU,IAAAV,EAAAd,KAAA,GAyBYd,EAAU,yDAAAgB,OAA2DjB,IAzBjF,eAAA6B,EAAAY,GAAAZ,EAAAX,KAAAW,EAAAa,GAAA,CAuBDV,KAAM,SACNC,MAAO,aACPC,MAzBCL,EAAAY,IAAAZ,EAAAd,KAAA,GA8BYd,EAAU,yDAAAgB,OAA2DjB,IA9BjF,eAAA6B,EAAAc,IAAAd,EAAAX,KAAAW,EAAAe,IAAA,CA4BDZ,KAAM,SACNC,MAAO,SACPC,MA9BCL,EAAAc,KAAAd,EAAAd,KAAA,GAmCYd,EAAU,4DAAAgB,OAA8DjB,IAnCpF,eAAA6B,EAAAgB,IAAAhB,EAAAX,KAAAW,EAAAiB,IAAA,CAiCDd,KAAM,UACNC,MAAO,UACPC,MAnCCL,EAAAgB,KAAAhB,EAAAd,KAAA,GAwCYd,EAAU,yDAAAgB,OAA2DjB,IAxCjF,eAAA6B,EAAAkB,IAAAlB,EAAAX,KAAAW,EAAAmB,IAAA,CAsCDhB,KAAM,cACNC,MAAO,mBACPC,MAxCCL,EAAAkB,KAAAlB,EAAAV,OAAA,UAAAU,EAAAE,GAAAF,EAAAO,GAAAP,EAAAS,GAAAT,EAAAW,GAAAX,EAAAa,GAAAb,EAAAe,IAAAf,EAAAiB,IAAAjB,EAAAmB,MAAA,yBAAAnB,EAAAT,SAAAQ,MAAF,yBAAAD,EAAAL,MAAAC,KAAAC,YAAA,GA4CXyB,aAAY,eAAAC,EAAA/C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAE,SAAA4C,EAAOC,EAASC,GAAhB,IAAAC,EAAA,OAAAjD,EAAAC,EAAAM,KAAA,SAAA2C,GAAA,cAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,UACNuC,EAAO,IAERF,EAHO,CAAAG,EAAAxC,KAAA,SAAAwC,EAAAzB,GAIMuB,EAJNE,EAAAxC,KAKG,UALHwC,EAAAzB,GAAA,EAQG,OARHyB,EAAAzB,GAAA,yBAAAyB,EAAAxC,KAAA,EAMed,EAAU,UAAAgB,OAAYmC,EAAZ,4BAAAnC,OAA8CjB,IANvE,cAMEsD,EANFC,EAAArC,KAAAqC,EAAApC,OAAA,0BAAAoC,EAAAxC,KAAA,GASed,EAAU,OAAAgB,OAASmC,EAAT,4BAAAnC,OAA2CjB,IATpE,eASEsD,EATFC,EAAArC,KAAAqC,EAAApC,OAAA,2BAYEmC,EAAM,KAZRC,EAAApC,OAAA,2BAAAoC,EAAApC,OAAA,SAiBHmC,GAjBG,yBAAAC,EAAAnC,SAAA+B,MAAF,gBAAAK,EAAAC,GAAA,OAAAP,EAAA5B,MAAAC,KAAAC,YAAA,IC3DDkC,eAAA,SAAAxD,GAAsB,IAAnB+B,EAAmB/B,EAAnB+B,MAAOC,EAAYhC,EAAZgC,MACrB,OACIyB,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,YACXF,EAAArD,EAAAsD,cAAA,UAAK3B,GASL0B,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,sBACXF,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,kBACV3B,EAAM4B,QAAQC,OAAS,GAAK7B,EAAM4B,QAAQE,IAAI,SAACC,EAAMC,GAAP,OAC3CP,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,kBACXF,EAAArD,EAAAsD,cAAA,OAAKO,IAAG,kCAAAlD,OAAoCgD,EAAKG,aAAeC,IAAKJ,EAAKK,yBClBvFC,SAAA,SAAArE,GAAc,IAAX+D,EAAW/D,EAAX+D,KAEVO,EAAY,IAAIC,KAAMR,EAAKS,gBAC3BC,EAAS,GACb,IAAK,IAAIC,KAAKX,EAAKU,OACfA,EAAOE,KAAMZ,EAAKU,OAAOC,GAAGE,MAGhC,OACInB,EAAArD,EAAAsD,cAAA,WAASC,UAAU,WAAWkB,MAAO,CACjCC,eAAgB,QAChBC,WAAY,SACZC,gBAAe,0CAAAjE,OAA4CgD,EAAKkB,cAAjD,OAEfxB,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,sBACXF,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,wBACXF,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,kBAAkBI,EAAKmB,eACtCzB,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,kBACXF,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,oBAAoBI,EAAKoB,aAAxC,WACA1B,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,kBAAkBW,EAAUc,eAC3C3B,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,qBAAqBI,EAAKsB,kBAAzC,aAAiG,IAA3BtB,EAAKsB,kBAA0B,IAAM,KAE/G5B,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,yBAAyBI,EAAKuB,UAC7C7B,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,qBACXF,EAAArD,EAAAsD,cAAA,KAAG6B,KAAI,UAAAxE,OAAYgD,EAAKyB,IAAM7B,UAAU,yBAAxC,mBACAF,EAAArD,EAAAsD,cAAA,KAAG6B,KAAI,YAAAxE,OAAcgD,EAAKyB,IAAM7B,UAAU,0BAA1C,kBAEJF,EAAArD,EAAAsD,cAAA,OAAKC,UAAW,oBAAmBF,EAAArD,EAAAsD,cAAA,6BAA0Be,EAAOgB,KAAK,YC3B9EC,SAAA,SAAA1F,GAAa,IAAX2F,EAAW3F,EAAX2F,MACb,OACIlC,EAAArD,EAAAsD,cAAA,UAAQC,UAAWgC,EAAQ,QAAU,IACjClC,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,gBACnBF,EAAArD,EAAAsD,cAAA,KAAG6B,KAAK,KACJ9B,EAAArD,EAAAsD,cAAA,OAAKO,IAAI,4EAA4EE,IAAI,cAGzFV,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,gBACXF,EAAArD,EAAAsD,cAAA,KAAG6B,KAAK,KACJ9B,EAAArD,EAAAsD,cAAA,OAAKO,IAAI,2EAA2EE,IAAI,oBCN7FyB,EAAA,WAEb,IAAAC,EAAkCC,mBAAU,IAA5CC,EAAA9F,OAAA+F,EAAA,EAAA/F,CAAA4F,EAAA,GAAOI,EAAPF,EAAA,GAAkBG,EAAlBH,EAAA,GACAI,EAAwCL,mBAAU,MAAlDM,EAAAnG,OAAA+F,EAAA,EAAA/F,CAAAkG,EAAA,GAAOE,EAAPD,EAAA,GAAqBE,EAArBF,EAAA,GACAG,EAAsCT,oBAAU,GAAhDU,EAAAvG,OAAA+F,EAAA,EAAA/F,CAAAsG,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GAoCA,OAlCAG,oBAAU,YACK,eAAA3G,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAsG,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA7G,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEGU,EAAKC,cAFR,cAEVoF,EAFUjG,EAAAK,KAGdkF,EAAaU,GAITC,EAAYD,EAAKK,OAAO,SAAAvC,GAAC,MAAa,cAAXA,EAAE5C,OAC7BgF,EAAeI,KAAKC,MAAMD,KAAKE,UAAWP,EAAU,GAAG7E,MAAM4B,QAAQC,OAAS,IAC9EkD,EAASF,EAAU,GAAG7E,MAAM4B,QAAQkD,GAT1BnG,EAAAE,KAAA,EAUSU,EAAKwB,aAAagE,EAAOvB,GAAI,MAVtC,OAUVwB,EAVUrG,EAAAK,KAYdsF,EAAgBU,GAZF,yBAAArG,EAAAO,SAAAZ,MAAH,yBAAAN,EAAAoB,MAAAC,KAAAC,aAAA,EAeb+F,IACC,IAEHV,oBAAW,WACT,IAAMW,EAAkB,WAClBC,OAAOC,QAAU,GACnBd,GAAe,GAEfA,GAAe,IAMnB,OAFAa,OAAOE,iBAAiB,SAAUH,GAE3B,WACLC,OAAOG,oBAAoB,SAAUJ,KAEtC,IAEH7D,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,QAEbF,EAAArD,EAAAsD,cAACgC,EAAD,CAAQC,MAAOc,IAEdJ,GACC5C,EAAArD,EAAAsD,cAACW,EAAD,CAAeN,KAAMsC,IAGvB5C,EAAArD,EAAAsD,cAAA,WAASC,UAAU,SAChBsC,EAAUnC,IAAI,SAACC,EAAKC,GAAN,OACbP,EAAArD,EAAAsD,cAACF,EAAD,CAAUQ,IAAKA,EAAKjC,MAAOgC,EAAKhC,MAAOC,MAAO+B,EAAK/B,WAIvDyB,EAAArD,EAAAsD,cAAA,2BACYD,EAAArD,EAAAsD,cAAA,QAAMiE,KAAK,MAAMC,aAAW,iBAA5B,gBADZ,gCAEEnE,EAAArD,EAAAsD,cAAA,WAFF,kCAGED,EAAArD,EAAAsD,cAAA,WAHF,wCC1DJmE,IAASC,OACPrE,EAAArD,EAAAsD,cAACD,EAAArD,EAAM2H,WAAP,KACEtE,EAAArD,EAAAsD,cAACkC,EAAD,OAEFoC,SAASC,eAAe","file":"static/js/main.a91652fa.chunk.js","sourcesContent":["const API_KEY = '2d595029cea9b0886d05ac03ebd2d763';\nconst API_BASE = 'https://api.themoviedb.org/3';\n/*\n - originais netflix\n -recomendados (trending)\n - em alta (top rated)\n -ação\n -comédia\n -terror\n -romance\n -documentários\n*/\n\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await basicFetch (`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para você',\n                items: await basicFetch (`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'top rated',\n                title: 'Em Alta',\n                items: await basicFetch (`/movie/top_rated?&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch (`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch (`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch (`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch (`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await basicFetch (`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            },\n        ];\n    },\n    getMovieInfo: async (movieId, type) =>{\n        let info = {};\n        \n        if(movieId) {\n                switch (type){\n                case 'movie':\n                    info = await basicFetch (`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\n                break;\n                case 'tv':\n                    info = await basicFetch (`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\n                break;\n                default:\n                    info= null;\n                break;\n            }\n        }\n\n        return info\n    }\n}","import React from 'react';\nimport \"./MovieRow.css\";\n// import NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\n// import NavigateNextIcon from '@mui/icons-material/NavigateNext';\n// 2:33:50\nexport default ({ title, items }) => {\n    return (\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n\n            {/* <div className=\"movieRown--left\">\n                <NavigateBeforeIcon style={{fontSize:50}}/>\n            </div>\n            <div className=\"movieRow--rigth\">\n                <NavigateNextIcon style={{fontSize:50}}/>\n            </div> */}\n\n            <div className=\"movieRow--listarea\">\n                <div className=\"movieRow--list\">\n                    {items.results.length > 0 && items.results.map((item, key) => (\n                        <div className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n                        </div>\n                    ))}\n                </div>\n\n\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport './FeaturedMovie.css';\n\nexport default ({ item }) => {\n\n    let firstDate = new Date (item.first_air_date);\n    let genres = [];\n    for (let i in item.genres){\n        genres.push (item.genres[i].name)\n    }\n\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            background: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">{item.original_name}</div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                    </div>\n                    <div className=\"featured--description\">{item.overview}</div>\n                    <div className=\"featured--buttons\">\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">▶ Assistir</a>\n                        <a href={`/lis/add/${item.id}` }className=\"featured--mylistbutton\">+ Minha Lista</a>\n                    </div>\n                    <div className =\"featured--genres\"><strong>Gêneros:</strong>{genres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    );\n}","import React from \"react\";\nimport './Header.css'\n\nexport default ({black}) => {\n    return (\n        <header className={black ? 'black' : '' }>\n            <div className=\"header--logo\">\n        <a href=\"/\">\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\"></img>\n        </a>\n            </div>\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img src=\"https://ih1.redbubble.net/image.618427277.3222/flat,800x800,075,f.u2.jpg\" alt=\"Usuário\"></img>\n                </a>\n            </div>\n        </header>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport tmdb from \"./tmdb\";\nimport './App.css'\nimport MovieRow from './components/MovieRow'\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState ([]);\n  const [featuredData, setfeaturedData] = useState (null);\n  const [blackHeader, setBlackHeader] = useState (false)\n\n  useEffect(() => {\n    const loadAll = async ()=>{\n      // pegar lista total\n      let list = await tmdb.getHomeList();\n      setMovieList(list);\n\n\n      //pegar o featured\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random()* (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await tmdb.getMovieInfo(chosen.id, 'tv');\n      \n      setfeaturedData(chosenInfo);\n    }\n    \n    loadAll();\n  }, []);\n\n  useEffect (() => {\n    const scrollListenner = () => {\n      if (window.scrollY > 10){\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListenner);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListenner)\n    }\n  }, []);\n  return (\n  <div className=\"page\">\n\n    <Header black={blackHeader} />\n\n    {featuredData &&\n      <FeaturedMovie item={featuredData}/>\n    }\n\n    <section className=\"lists\">\n      {movieList.map((item,key)=>(\n        <MovieRow key={key} title={item.title} items={item.items}/>\n      ))}\n    </section>\n\n    <footer>\n      feito com <span role=\"img\" aria-label=\"coração\">💜</span> por Luana Rodrigues de Paula \n      <br />Direitos de Imagem para Netflix\n      <br />Dados pegos do site Themoviedb.org\n    </footer>\n  </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}